pipeline {
    agent none
    stages {
        stage('Prepare report') {
            agent any
            steps {
                sh 'mkdir -p build'
                sh 'printf "Compiler\tModel\tTF\tQuantization\tBFloat16\tCorrect/Total\tResult\n" > build/accuracy.csv'
                stash includes: 'build/accuracy.csv', name: 'accuracy'

                sh 'printf "Compiler\tApp\tTF\tQuantization\tBFloat16\tAverage Time\n" > build/benchmark.csv'
                stash includes: 'build/benchmark.csv', name: 'benchmark'
                
                sh 'printf "Compiler\tModel\tTF\tQuantization\tBFloat16\tResult\tLatency\n" > build/model_zoo.csv'
                stash includes: 'build/model_zoo.csv', name: 'model_zoo'
            }
        }
        stage('BuildAndTest') {
            matrix {
                axes {
                    axis {
                        name 'TF_VERSION'
                        values '1.15.4', '2.5.2', '2.6.2'
                    }
                    axis {
                        name 'CXX_COMPILER'
                        values 'icpc', 'g++', 'icpx'
                    }
                    axis {
                        name 'QUANTIZATION'
                        values '--quantization', '--no-quantization'
                    }
                    axis {
                        name 'BFLOAT16'
                        values '--bfloat16', '--no-bfloat16'
                    }
                }
                // WC1-1081: icpc fails to compile TF >= 2.6.0
                excludes {
                    exclude {
                        axis {
                            name 'TF_VERSION'
                            values '2.6.2'
                        }
                        axis {
                            name 'CXX_COMPILER'
                            values 'icpc'
                        }
                    }
                    exclude {
                        axis {
                            name 'BFLOAT16'
                            values '--bfloat16'
                        }
                    }
                }
                agent {
                    dockerfile {
                        filename 'Dockerfile/Dockerfile-ci'
                        label 'JenkinsServer'
                        additionalBuildArgs  '--target=base --build-arg TF_VERSION=${TF_VERSION}'
                        // TODO: WC1-1063 using of more cpus causes the accuracy script to hang or segfault
                        args '--cpuset-cpus="0-10" --init \
                            -v ${jenkins_data}:/data'
                    }
                }
                environment {
                    TFDS_DATA_DIR = '/data/tfds_data'
                }
                stages {
                    stage('build') {
                        steps {
                            // TODO: use virtualenv?
                            sh '${Python3_EXECUTABLE} -m pip install -r requirements-tf${TF_VERSION%%.*}.txt'
                            dir('build') {
                                sh 'rm -rf CMakeCache.txt CMakeFiles accuracy.csv acc.html benchmark.csv bench.html model_zoo.csv zoo.html'
                                sh '''#!/bin/bash
                                    source /opt/intel/oneapi/setvars.sh intel64

                                    cmake --no-warn-unused-cli -DPython3_EXECUTABLE:FILEPATH=${Python3_EXECUTABLE} -DCMAKE_C_COMPILER=icc -DCMAKE_CXX_COMPILER=${CXX_COMPILER} -DCMAKE_BUILD_TYPE:STRING=Release -G "Unix Makefiles" ..
                                    cmake --build . --config Debug --target clean -v -j --
                                    cmake --build . --config Debug --target all -v -j --
                                '''
                            }
                        }
                    }
                    stage('benchmark') {
                        steps {
                            unstash 'benchmark'
                            script {
                                for(a in [10, 1000]) {
                                    sh """#!/bin/bash
                                        source /opt/intel/oneapi/setvars.sh intel64
                                        ./build/tests/benchmark/benchmark ${a} ${QUANTIZATION} ${BFLOAT16} | tee build/benchmark.log
                                    """
                                    sh "grep 'Average Time' build/benchmark.log | sed 's/.*Time: \\(.*\\)/${CXX_COMPILER}\\tbenchmark.exe $a\\t${TF_VERSION}\\t${QUANTIZATION}\\t${BFLOAT16}\\t\\1/' >> build/benchmark.csv"
                                }
                            }
                            stash includes: 'build/benchmark.csv', name: 'benchmark'
                        }
                    }            
                    stage('accuracy'){
                        steps {
                            unstash 'accuracy'
                            sh '''#!/bin/bash
                                export TF_VERSION=${TF_VERSION}
                                export TF_MAJOR=${TF_VERSION%%.*}
                                export CXX_COMPILER=${CXX_COMPILER}
                                export QUANTIZATION=${QUANTIZATION}
                                export BFLOAT16=${BFLOAT16}
                                export path_to_bertop=$(pwd)/build/src/tf_op/libBertOp.so   # accuracy_launcher.sh will pushd 
                                export out_file=$(pwd)/build/accuracy.csv                   # to its directory so use absolute
                                base_dir=/data/tf${TF_MAJOR}                                # paths to external resources
                                export Python3_EXECUTABLE=${Python3_EXECUTABLE}
                                export PYTHONPATH=${PYTHONPATH}:$(pwd)/python               # Need model modifier on PYTHONPATH

                                source /opt/intel/oneapi/setvars.sh intel64
                                tests/tf${TF_MAJOR}_ops_accuracy/accuracy_launcher.sh ${base_dir}
                            '''
                            stash includes: 'build/accuracy.csv', name: 'accuracy'
                        }
                    }
                    stage('model-zoo'){
                        steps{
                            unstash 'model_zoo'
                            sh '''#!/bin/bash
                                set -e
                                export PYTHONPATH=$PYTHONPATH:$(pwd)/model_zoo/models/language_modeling/tensorflow/bert_large/inference
                                export PYTHONPATH=${PYTHONPATH}:$(pwd)/python
                                OUTPUT_DIR=$(mktemp -d)
                                GLUE_DIR=/data/tf1/download_glue/glue_data
                                BERT_BASE_DIR=/data/model_zoo/bert-base-tf2
                                path_to_bertop=$(pwd)/build/src/tf_op/libBertOp.so
                                source /opt/intel/oneapi/setvars.sh intel64
                                FROZEN_DIR=/data/model_zoo/frozen
                                python tests/model_zoo/run_model_zoo.py \
                                  --frozen_graph_path=$FROZEN_DIR/frozen_model.pb \
                                  --output_dir=$OUTPUT_DIR \
                                  --bert_config_file=$BERT_BASE_DIR/bert_config.json \
                                  --do_train=False \
                                  --precision=fp32 \
                                  --do_lower_case=True \
                                  --task_name=MRPC \
                                  --do_eval=true \
                                  --vocab_file=$BERT_BASE_DIR/vocab.txt \
                                  --data_dir=$GLUE_DIR/MRPC \
                                  --eval_batch_size=1 \
                                  --experimental_gelu=False \
                                  --max_seq_length=128 \
                                  --inter_op_parallelism_threads=1 \
                                  --intra_op_parallelism_threads=18 \
                                  $path_to_bertop 2>&1 | tee build/model_zoo.log   
                                tmpdir=$(mktemp -d)
                                cp -R /data/model_zoo/frozen_modified/* $tmpdir/
                                FROZEN_DIR=$tmpdir
                                python -m model_modifier.configure_bert_op $QUANTIZATION $BFLOAT16 $FROZEN_DIR/frozen_graph.pb
                                python tests/model_zoo/run_model_zoo.py \
                                  --frozen_graph_path=$FROZEN_DIR/frozen_graph.pb \
                                  --output_dir=$OUTPUT_DIR \
                                  --bert_config_file=$BERT_BASE_DIR/bert_config.json \
                                  --do_train=False \
                                  --precision=fp32 \
                                  --do_lower_case=True \
                                  --task_name=MRPC \
                                  --do_eval=true \
                                  --vocab_file=$BERT_BASE_DIR/vocab.txt \
                                  --data_dir=$GLUE_DIR/MRPC \
                                  --eval_batch_size=1 \
                                  --experimental_gelu=False \
                                  --max_seq_length=128 \
                                  --inter_op_parallelism_threads=1 \
                                  --intra_op_parallelism_threads=18 \
                                  $path_to_bertop 2>&1 | tee -a build/model_zoo.log  
                            '''
                            sh '''
                                model_zoo1=$(grep -m1 'w:  eval_accuracy ' build/model_zoo.log | sed 's/.*= \\(.*\\)/'${CXX_COMPILER}'\tfrozen\t'${TF_VERSION}'\t'${QUANTIZATION}'\t'${BFLOAT16}'\t\\1/' )
                                model_zoo2=$(grep -m1 'Latency is ' build/model_zoo.log | sed 's/.*is \\(.*\\)/\\1/' )
                                model_zoo3=$(grep 'w:  eval_accuracy ' build/model_zoo.log | sed 's/.*= \\(.*\\)/'${CXX_COMPILER}'\tfrozen_modified\t'${TF_VERSION}'\t'${QUANTIZATION}'\t'${BFLOAT16}'\t\\1/' | tail -1)
                                model_zoo4=$(grep 'Latency is ' build/model_zoo.log | sed 's/.*is \\(.*\\)/\\1/' | tail -1)
                                echo "$model_zoo1\t$model_zoo2" >> build/model_zoo.csv
                                echo "$model_zoo3\t$model_zoo4" >> build/model_zoo.csv
                            ''' 
                            stash includes: 'build/model_zoo.csv', name: 'model_zoo'
                        }
                    }
                }
            }
        }
    }
    post {
        always {
            node(null) {
                unstash 'accuracy'
                sh "${Python3_EXECUTABLE} -c \"import pandas as pd; pd.read_csv('build/accuracy.csv', sep='\\t', header=None).to_html('acc.html', index=False, header=False)\""
                archiveArtifacts artifacts: "acc.html"
                sh "cat build/accuracy.csv"
                step([$class: 'ACIPluginPublisher', name: 'acc.html', shownOnProjectPage: true])

                unstash 'benchmark'
                sh "${Python3_EXECUTABLE} -c \"import pandas as pd; pd.read_csv('build/benchmark.csv', sep='\\t', header=None).to_html('bench.html', index=False, header=False)\""
                archiveArtifacts artifacts: "bench.html"
                step([$class: 'ACIPluginPublisher', name: 'bench.html', shownOnProjectPage: true])

                unstash 'model_zoo'
                sh "${Python3_EXECUTABLE} -c \"import pandas as pd; pd.read_csv('build/model_zoo.csv', sep='\\t', header=None).dropna().to_html('zoo.html', index=False, header=False)\""
                archiveArtifacts artifacts: "zoo.html"
                step([$class: 'ACIPluginPublisher', name: 'zoo.html', shownOnProjectPage: true])
            }
        }
    }
}
